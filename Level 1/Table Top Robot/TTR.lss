
TTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ef  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f5  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002da  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e5  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002a8  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
DDRD=0b00000000; //Setting part A as an input port
  74:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111; //Setting Part B as an output port
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111; // Pulling up all the pins of part A
  7a:	82 bb       	out	0x12, r24	; 18
int c;
while(1)
{
c=PIND;
if(c==0b11110000)  //All the sensors are on the table
PORTB=0b00001010; //Move Forward
  7c:	1a e0       	ldi	r17, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	60 e5       	ldi	r22, 0x50	; 80
  80:	73 ec       	ldi	r23, 0xC3	; 195
}
if(c==0b11110010) //Sensor 3 is out of table
{
PORTB=0b00001010;
_delay_ms(200);
PORTB=0b00001001;
  82:	a9 e0       	ldi	r26, 0x09	; 9
  84:	44 e2       	ldi	r20, 0x24	; 36
  86:	54 ef       	ldi	r21, 0xF4	; 244
_delay_ms(250);
}

if(c==0b11110100) //Sensor 2 is out of table
{
PORTB=0b00000101;
  88:	05 e0       	ldi	r16, 0x05	; 5
_delay_ms(200);
PORTB=0b00000110;
  8a:	b6 e0       	ldi	r27, 0x06	; 6
  8c:	c9 e1       	ldi	r28, 0x19	; 25
  8e:	d0 e0       	ldi	r29, 0x00	; 0
DDRB=0b11111111; //Setting Part B as an output port
PORTD=0b11111111; // Pulling up all the pins of part A
int c;
while(1)
{
c=PIND;
  90:	80 b3       	in	r24, 0x10	; 16
  92:	90 e0       	ldi	r25, 0x00	; 0
if(c==0b11110000)  //All the sensors are on the table
  94:	80 3f       	cpi	r24, 0xF0	; 240
  96:	91 05       	cpc	r25, r1
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
PORTB=0b00001010; //Move Forward
  9a:	18 bb       	out	0x18, r17	; 24
  9c:	24 c0       	rjmp	.+72     	; 0xe6 <main+0x7a>

if(c==0b11111000) //Sensor 1 is out of table
  9e:	88 3f       	cpi	r24, 0xF8	; 248
  a0:	91 05       	cpc	r25, r1
  a2:	49 f4       	brne	.+18     	; 0xb6 <main+0x4a>
{
PORTB=0b00000101;
  a4:	08 bb       	out	0x18, r16	; 24
  a6:	fb 01       	movw	r30, r22
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
_delay_ms(200);
PORTB=0b00001001;
  ac:	a8 bb       	out	0x18, r26	; 24
  ae:	fa 01       	movw	r30, r20
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
  b4:	24 c0       	rjmp	.+72     	; 0xfe <main+0x92>
_delay_ms(250);
}

if(c==0b11110100) //Sensor 2 is out of table
  b6:	84 3f       	cpi	r24, 0xF4	; 244
  b8:	91 05       	cpc	r25, r1
  ba:	49 f4       	brne	.+18     	; 0xce <main+0x62>
{
PORTB=0b00000101;
  bc:	08 bb       	out	0x18, r16	; 24
  be:	fb 01       	movw	r30, r22
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
_delay_ms(200);
PORTB=0b00000110;
  c4:	b8 bb       	out	0x18, r27	; 24
  c6:	fa 01       	movw	r30, r20
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5c>
  cc:	29 c0       	rjmp	.+82     	; 0x120 <main+0xb4>
_delay_ms(250);
}
if(c==0b11110010) //Sensor 3 is out of table
  ce:	82 3f       	cpi	r24, 0xF2	; 242
  d0:	91 05       	cpc	r25, r1
  d2:	49 f4       	brne	.+18     	; 0xe6 <main+0x7a>
{
PORTB=0b00001010;
  d4:	18 bb       	out	0x18, r17	; 24
  d6:	fb 01       	movw	r30, r22
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x6c>
_delay_ms(200);
PORTB=0b00001001;
  dc:	a8 bb       	out	0x18, r26	; 24
  de:	fa 01       	movw	r30, r20
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
  e4:	22 c0       	rjmp	.+68     	; 0x12a <main+0xbe>
_delay_ms(250);
}

if(c==0b11110001) //Sensor 4 is out of table
  e6:	81 3f       	cpi	r24, 0xF1	; 241
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <main+0x92>
{
PORTB=0b00001010;
  ec:	18 bb       	out	0x18, r17	; 24
  ee:	fb 01       	movw	r30, r22
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x84>
_delay_ms(200);
PORTB=0b00001001;
  f4:	a8 bb       	out	0x18, r26	; 24
  f6:	fa 01       	movw	r30, r20
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x8c>
  fc:	1b c0       	rjmp	.+54     	; 0x134 <main+0xc8>
_delay_ms(250);
}

if(c==0b11111100) //Sensor 1 and 2 is out of table
  fe:	8c 3f       	cpi	r24, 0xFC	; 252
 100:	91 05       	cpc	r25, r1
 102:	71 f4       	brne	.+28     	; 0x120 <main+0xb4>
{
PORTB=0b00000101;
 104:	08 bb       	out	0x18, r16	; 24
 106:	fa 01       	movw	r30, r20
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x9c>
_delay_ms(250);
PORTB=0b00001001;
 10c:	a8 bb       	out	0x18, r26	; 24
 10e:	28 eb       	ldi	r18, 0xB8	; 184
 110:	3b e0       	ldi	r19, 0x0B	; 11
 112:	fe 01       	movw	r30, r28
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0xa8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d1 f7       	brne	.-12     	; 0x112 <main+0xa6>
 11e:	17 c0       	rjmp	.+46     	; 0x14e <main+0xe2>
_delay_ms(300);
}

if(c==0b11111001) //Sensor 1 and 4  is out of table
 120:	89 3f       	cpi	r24, 0xF9	; 249
 122:	91 05       	cpc	r25, r1
 124:	11 f4       	brne	.+4      	; 0x12a <main+0xbe>
PORTB=0b00000110;
 126:	b8 bb       	out	0x18, r27	; 24
 128:	0d c0       	rjmp	.+26     	; 0x144 <main+0xd8>

if(c==0b11110011) //Sensor 3 and 4  is out of table
 12a:	83 3f       	cpi	r24, 0xF3	; 243
 12c:	91 05       	cpc	r25, r1
 12e:	11 f4       	brne	.+4      	; 0x134 <main+0xc8>
PORTB=0b00001010;
 130:	18 bb       	out	0x18, r17	; 24
 132:	0d c0       	rjmp	.+26     	; 0x14e <main+0xe2>

if(c==0b11110110) //Sensor 2 and 3 is out of table
 134:	86 3f       	cpi	r24, 0xF6	; 246
 136:	91 05       	cpc	r25, r1
 138:	11 f4       	brne	.+4      	; 0x13e <main+0xd2>
PORTB=0b00000110;
 13a:	b8 bb       	out	0x18, r27	; 24
 13c:	0b c0       	rjmp	.+22     	; 0x154 <main+0xe8>

if(c==0b11111110) //Sensor 1,2 and 3  is out of table
 13e:	8e 3f       	cpi	r24, 0xFE	; 254
 140:	91 05       	cpc	r25, r1
 142:	19 f0       	breq	.+6      	; 0x14a <main+0xde>
PORTB=0b00000110;

if(c==0b11110111) //Sensor 1 is on table
 144:	87 3f       	cpi	r24, 0xF7	; 247
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <main+0xe2>
PORTB=0b00000110;
 14a:	b8 bb       	out	0x18, r27	; 24
 14c:	a1 cf       	rjmp	.-190    	; 0x90 <main+0x24>

if(c==0b11111011) //Sensor 2 is on the table
 14e:	8b 3f       	cpi	r24, 0xFB	; 251
 150:	91 05       	cpc	r25, r1
 152:	21 f0       	breq	.+8      	; 0x15c <main+0xf0>
PORTB=0b00001001;

if(c==0b11111101) //Sensor 3 is on the table
 154:	8d 3f       	cpi	r24, 0xFD	; 253
 156:	91 05       	cpc	r25, r1
 158:	09 f0       	breq	.+2      	; 0x15c <main+0xf0>
 15a:	9a cf       	rjmp	.-204    	; 0x90 <main+0x24>
PORTB=0b00001001;
 15c:	a8 bb       	out	0x18, r26	; 24
 15e:	98 cf       	rjmp	.-208    	; 0x90 <main+0x24>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
