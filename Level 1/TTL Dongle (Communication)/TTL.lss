
TTL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000164  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d2  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c3  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
#include<avr/io.h>
#include<util/delay.h>

void uart_init() //function to initialise UART
{
UBRRH= (myubrr>>8);
  6c:	10 bc       	out	0x20, r1	; 32
UBRRL= myubrr;
  6e:	8c e0       	ldi	r24, 0x0C	; 12
  70:	89 b9       	out	0x09, r24	; 9
UCSRB= UCSRB | (1<<RXEN); //enable receiver
  72:	54 9a       	sbi	0x0a, 4	; 10
}
  74:	08 95       	ret

00000076 <UART_RECEIVE>:

unsigned int UART_RECEIVE() //function to receive data
{
while((UCSRA&(1<<RXC))==0); //wait while data is being received
  76:	5f 9b       	sbis	0x0b, 7	; 11
  78:	fe cf       	rjmp	.-4      	; 0x76 <UART_RECEIVE>

return(UDR); //return 8-bit data
  7a:	8c b1       	in	r24, 0x0c	; 12
}
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	08 95       	ret

00000080 <main>:

void main () //main
{
unsigned char value; // declaring a variable ot save received data

DDRB=0b11111111; //Sets PB6,PB7 as output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 bb       	out	0x17, r24	; 23
#include<avr/io.h>
#include<util/delay.h>

void uart_init() //function to initialise UART
{
UBRRH= (myubrr>>8);
  84:	10 bc       	out	0x20, r1	; 32
UBRRL= myubrr;
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	89 b9       	out	0x09, r24	; 9
UCSRB= UCSRB | (1<<RXEN); //enable receiver
  8a:	54 9a       	sbi	0x0a, 4	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	84 ed       	ldi	r24, 0xD4	; 212
  8e:	90 e3       	ldi	r25, 0x30	; 48
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x10>

if(value=='a') //if data received is 'a'
PORTB=0b00000110; //Go left

if(value=='d') //if data received is 'd'
PORTB=0b00001001; //Go right
  94:	49 e0       	ldi	r20, 0x09	; 9

if(value=='s') //if data received is 's'
PORTB=0b00000101; //Go reverse

if(value=='a') //if data received is 'a'
PORTB=0b00000110; //Go left
  96:	36 e0       	ldi	r19, 0x06	; 6

if(value=='w') //if data received is 'w'
PORTB=0b00001010; //Go forward

if(value=='s') //if data received is 's'
PORTB=0b00000101; //Go reverse
  98:	25 e0       	ldi	r18, 0x05	; 5
while(1)
{
value=UART_RECEIVE(); //save the received data in the variable

if(value=='w') //if data received is 'w'
PORTB=0b00001010; //Go forward
  9a:	9a e0       	ldi	r25, 0x0A	; 10
UCSRB= UCSRB | (1<<RXEN); //enable receiver
}

unsigned int UART_RECEIVE() //function to receive data
{
while((UCSRA&(1<<RXC))==0); //wait while data is being received
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1c>

return(UDR); //return 8-bit data
  a0:	8c b1       	in	r24, 0x0c	; 12

while(1)
{
value=UART_RECEIVE(); //save the received data in the variable

if(value=='w') //if data received is 'w'
  a2:	87 37       	cpi	r24, 0x77	; 119
  a4:	11 f4       	brne	.+4      	; 0xaa <main+0x2a>
PORTB=0b00001010; //Go forward
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <main+0x42>

if(value=='s') //if data received is 's'
  aa:	83 37       	cpi	r24, 0x73	; 115
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x32>
PORTB=0b00000101; //Go reverse
  ae:	28 bb       	out	0x18, r18	; 24
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <main+0x42>

if(value=='a') //if data received is 'a'
  b2:	81 36       	cpi	r24, 0x61	; 97
  b4:	11 f4       	brne	.+4      	; 0xba <main+0x3a>
PORTB=0b00000110; //Go left
  b6:	38 bb       	out	0x18, r19	; 24
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <main+0x42>

if(value=='d') //if data received is 'd'
  ba:	84 36       	cpi	r24, 0x64	; 100
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x42>
PORTB=0b00001001; //Go right
  be:	48 bb       	out	0x18, r20	; 24
  c0:	ed cf       	rjmp	.-38     	; 0x9c <main+0x1c>

else 
PORTB=0b00000000;
  c2:	18 ba       	out	0x18, r1	; 24
  c4:	eb cf       	rjmp	.-42     	; 0x9c <main+0x1c>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
