
ADCBSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000253  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000274  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000107  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c6  00000000  00000000  00000c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<util/delay.h>

void init_adc() //ADC initialising function

{
ADCSRA = ADCSRA | (0b00000001<<ADEN); // ENable the ADC
  6c:	37 9a       	sbi	0x06, 7	; 6
ADCSRA = ADCSRA | (0b00000001<<ADPS2);  // Set the sampling rate
  6e:	32 9a       	sbi	0x06, 2	; 6
ADMUX = ADMUX | (0b00000001<<REFS0); // Set the reference voltage
  70:	3e 9a       	sbi	0x07, 6	; 7

}
  72:	08 95       	ret

00000074 <read_adc>:

unsigned int read_adc()
{
int p=0b00000000; //select the input pin
ADMUX = ADMUX | p; //ADMUX=01000000
  74:	87 b1       	in	r24, 0x07	; 7
  76:	87 b9       	out	0x07, r24	; 7

ADCSRA = ADCSRA | 1<<ADSC; //Start conversion
  78:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&(0b00000001<<ADIF)) ==0) //Check for end conversion
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <read_adc+0x6>
{}
ADCSRA = ADCSRA | (0b00000001<<ADIF); //clear ADIF bit
  7e:	34 9a       	sbi	0x06, 4	; 6

return(ADC); //Get the output from ADC
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
}
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:

void main()
{
  88:	7f 92       	push	r7
  8a:	8f 92       	push	r8
  8c:	9f 92       	push	r9
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
DDRB=0b11111111; //Part B is output
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	87 bb       	out	0x17, r24	; 23
init_adc(); //call the ADC initialising function
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
  aa:	88 e8       	ldi	r24, 0x88	; 136
  ac:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	29 e1       	ldi	r18, 0x19	; 25
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <main+0x2a>
TOFF=a; //ON Time based on the current Analog input
TON=T-TOFF; //OFF Time = Total Time Period - ON time

if(p<870)
{
PORTB=0b00001010;
  bc:	9a e0       	ldi	r25, 0x0A	; 10
  be:	79 2e       	mov	r7, r25
_delay_ms(TON);
  c0:	89 e1       	ldi	r24, 0x19	; 25
  c2:	88 2e       	mov	r8, r24
  c4:	91 2c       	mov	r9, r1
unsigned int TON;
unsigned int TOFF;

while(1)
{
p=read_adc(); //Read the ADC input from ADC
  c6:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
a=(p/40); // scaling the total time period
T=25.6; //Total time period
TOFF=a; //ON Time based on the current Analog input
TON=T-TOFF; //OFF Time = Total Time Period - ON time

if(p<870)
  ca:	23 e0       	ldi	r18, 0x03	; 3
  cc:	86 36       	cpi	r24, 0x66	; 102
  ce:	92 07       	cpc	r25, r18
  d0:	08 f0       	brcs	.+2      	; 0xd4 <main+0x4c>
  d2:	88 c0       	rjmp	.+272    	; 0x1e4 <main+0x15c>
unsigned int TOFF;

while(1)
{
p=read_adc(); //Read the ADC input from ADC
a=(p/40); // scaling the total time period
  d4:	68 e2       	ldi	r22, 0x28	; 40
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 3d 02 	call	0x47a	; 0x47a <__udivmodhi4>
  dc:	eb 01       	movw	r28, r22
TOFF=a; //ON Time based on the current Analog input
TON=T-TOFF; //OFF Time = Total Time Period - ON time

if(p<870)
{
PORTB=0b00001010;
  de:	78 ba       	out	0x18, r7	; 24
_delay_ms(TON);
  e0:	b4 01       	movw	r22, r8
  e2:	6c 1b       	sub	r22, r28
  e4:	7d 0b       	sbc	r23, r29
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 24 01 	call	0x248	; 0x248 <__floatunsisf>
  ee:	5b 01       	movw	r10, r22
  f0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4a e7       	ldi	r20, 0x7A	; 122
  f8:	53 e4       	ldi	r21, 0x43	; 67
  fa:	0e 94 b2 01 	call	0x364	; 0x364 <__mulsf3>
  fe:	7b 01       	movw	r14, r22
 100:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	40 e8       	ldi	r20, 0x80	; 128
 108:	5f e3       	ldi	r21, 0x3F	; 63
 10a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__cmpsf2>
 10e:	88 23       	and	r24, r24
 110:	1c f4       	brge	.+6      	; 0x118 <main+0x90>
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	22 c0       	rjmp	.+68     	; 0x15c <main+0xd4>
		__ticks = 1;
	else if (__tmp > 65535)
 118:	c8 01       	movw	r24, r16
 11a:	b7 01       	movw	r22, r14
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	57 e4       	ldi	r21, 0x47	; 71
 124:	0e 94 ae 01 	call	0x35c	; 0x35c <__gesf2>
 128:	18 16       	cp	r1, r24
 12a:	a4 f4       	brge	.+40     	; 0x154 <main+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 12c:	c6 01       	movw	r24, r12
 12e:	b5 01       	movw	r22, r10
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e2       	ldi	r20, 0x20	; 32
 136:	51 e4       	ldi	r21, 0x41	; 65
 138:	0e 94 b2 01 	call	0x364	; 0x364 <__mulsf3>
 13c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__fixunssfsi>
 140:	05 c0       	rjmp	.+10     	; 0x14c <main+0xc4>
 142:	c4 01       	movw	r24, r8
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 148:	61 50       	subi	r22, 0x01	; 1
 14a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	61 15       	cp	r22, r1
 14e:	71 05       	cpc	r23, r1
 150:	c1 f7       	brne	.-16     	; 0x142 <main+0xba>
 152:	07 c0       	rjmp	.+14     	; 0x162 <main+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 154:	c8 01       	movw	r24, r16
 156:	b7 01       	movw	r22, r14
 158:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__fixunssfsi>
 15c:	cb 01       	movw	r24, r22
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0xd6>
PORTB=0b00000000;
 162:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF);
 164:	be 01       	movw	r22, r28
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 24 01 	call	0x248	; 0x248 <__floatunsisf>
 16e:	5b 01       	movw	r10, r22
 170:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	4a e7       	ldi	r20, 0x7A	; 122
 178:	53 e4       	ldi	r21, 0x43	; 67
 17a:	0e 94 b2 01 	call	0x364	; 0x364 <__mulsf3>
 17e:	7b 01       	movw	r14, r22
 180:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	5f e3       	ldi	r21, 0x3F	; 63
 18a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__cmpsf2>
 18e:	88 23       	and	r24, r24
 190:	1c f4       	brge	.+6      	; 0x198 <main+0x110>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	22 c0       	rjmp	.+68     	; 0x1dc <main+0x154>
		__ticks = 1;
	else if (__tmp > 65535)
 198:	c8 01       	movw	r24, r16
 19a:	b7 01       	movw	r22, r14
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	3f ef       	ldi	r19, 0xFF	; 255
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	57 e4       	ldi	r21, 0x47	; 71
 1a4:	0e 94 ae 01 	call	0x35c	; 0x35c <__gesf2>
 1a8:	18 16       	cp	r1, r24
 1aa:	a4 f4       	brge	.+40     	; 0x1d4 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ac:	c6 01       	movw	r24, r12
 1ae:	b5 01       	movw	r22, r10
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e2       	ldi	r20, 0x20	; 32
 1b6:	51 e4       	ldi	r21, 0x41	; 65
 1b8:	0e 94 b2 01 	call	0x364	; 0x364 <__mulsf3>
 1bc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__fixunssfsi>
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <main+0x144>
 1c2:	c4 01       	movw	r24, r8
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x13c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	61 50       	subi	r22, 0x01	; 1
 1ca:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	61 15       	cp	r22, r1
 1ce:	71 05       	cpc	r23, r1
 1d0:	c1 f7       	brne	.-16     	; 0x1c2 <main+0x13a>
 1d2:	79 cf       	rjmp	.-270    	; 0xc6 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d4:	c8 01       	movw	r24, r16
 1d6:	b7 01       	movw	r22, r14
 1d8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__fixunssfsi>
 1dc:	cb 01       	movw	r24, r22
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x156>
 1e2:	71 cf       	rjmp	.-286    	; 0xc6 <main+0x3e>
}

else
PORTB=0b00000000;
 1e4:	18 ba       	out	0x18, r1	; 24
 1e6:	6f cf       	rjmp	.-290    	; 0xc6 <main+0x3e>

000001e8 <__cmpsf2>:
 1e8:	6c d0       	rcall	.+216    	; 0x2c2 <__fp_cmp>
 1ea:	08 f4       	brcc	.+2      	; 0x1ee <__cmpsf2+0x6>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret

000001f0 <__fixunssfsi>:
 1f0:	94 d0       	rcall	.+296    	; 0x31a <__fp_splitA>
 1f2:	88 f0       	brcs	.+34     	; 0x216 <__fixunssfsi+0x26>
 1f4:	9f 57       	subi	r25, 0x7F	; 127
 1f6:	90 f0       	brcs	.+36     	; 0x21c <__fixunssfsi+0x2c>
 1f8:	b9 2f       	mov	r27, r25
 1fa:	99 27       	eor	r25, r25
 1fc:	b7 51       	subi	r27, 0x17	; 23
 1fe:	a0 f0       	brcs	.+40     	; 0x228 <__fixunssfsi+0x38>
 200:	d1 f0       	breq	.+52     	; 0x236 <__fixunssfsi+0x46>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	88 1f       	adc	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	1a f0       	brmi	.+6      	; 0x212 <__fixunssfsi+0x22>
 20c:	ba 95       	dec	r27
 20e:	c9 f7       	brne	.-14     	; 0x202 <__fixunssfsi+0x12>
 210:	12 c0       	rjmp	.+36     	; 0x236 <__fixunssfsi+0x46>
 212:	b1 30       	cpi	r27, 0x01	; 1
 214:	81 f0       	breq	.+32     	; 0x236 <__fixunssfsi+0x46>
 216:	9b d0       	rcall	.+310    	; 0x34e <__fp_zero>
 218:	b1 e0       	ldi	r27, 0x01	; 1
 21a:	08 95       	ret
 21c:	98 c0       	rjmp	.+304    	; 0x34e <__fp_zero>
 21e:	67 2f       	mov	r22, r23
 220:	78 2f       	mov	r23, r24
 222:	88 27       	eor	r24, r24
 224:	b8 5f       	subi	r27, 0xF8	; 248
 226:	39 f0       	breq	.+14     	; 0x236 <__fixunssfsi+0x46>
 228:	b9 3f       	cpi	r27, 0xF9	; 249
 22a:	cc f3       	brlt	.-14     	; 0x21e <__fixunssfsi+0x2e>
 22c:	86 95       	lsr	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	b3 95       	inc	r27
 234:	d9 f7       	brne	.-10     	; 0x22c <__fixunssfsi+0x3c>
 236:	3e f4       	brtc	.+14     	; 0x246 <__fixunssfsi+0x56>
 238:	90 95       	com	r25
 23a:	80 95       	com	r24
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	8f 4f       	sbci	r24, 0xFF	; 255
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	08 95       	ret

00000248 <__floatunsisf>:
 248:	e8 94       	clt
 24a:	09 c0       	rjmp	.+18     	; 0x25e <__floatsisf+0x12>

0000024c <__floatsisf>:
 24c:	97 fb       	bst	r25, 7
 24e:	3e f4       	brtc	.+14     	; 0x25e <__floatsisf+0x12>
 250:	90 95       	com	r25
 252:	80 95       	com	r24
 254:	70 95       	com	r23
 256:	61 95       	neg	r22
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	8f 4f       	sbci	r24, 0xFF	; 255
 25c:	9f 4f       	sbci	r25, 0xFF	; 255
 25e:	99 23       	and	r25, r25
 260:	a9 f0       	breq	.+42     	; 0x28c <__floatsisf+0x40>
 262:	f9 2f       	mov	r31, r25
 264:	96 e9       	ldi	r25, 0x96	; 150
 266:	bb 27       	eor	r27, r27
 268:	93 95       	inc	r25
 26a:	f6 95       	lsr	r31
 26c:	87 95       	ror	r24
 26e:	77 95       	ror	r23
 270:	67 95       	ror	r22
 272:	b7 95       	ror	r27
 274:	f1 11       	cpse	r31, r1
 276:	f8 cf       	rjmp	.-16     	; 0x268 <__floatsisf+0x1c>
 278:	fa f4       	brpl	.+62     	; 0x2b8 <__floatsisf+0x6c>
 27a:	bb 0f       	add	r27, r27
 27c:	11 f4       	brne	.+4      	; 0x282 <__floatsisf+0x36>
 27e:	60 ff       	sbrs	r22, 0
 280:	1b c0       	rjmp	.+54     	; 0x2b8 <__floatsisf+0x6c>
 282:	6f 5f       	subi	r22, 0xFF	; 255
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	16 c0       	rjmp	.+44     	; 0x2b8 <__floatsisf+0x6c>
 28c:	88 23       	and	r24, r24
 28e:	11 f0       	breq	.+4      	; 0x294 <__floatsisf+0x48>
 290:	96 e9       	ldi	r25, 0x96	; 150
 292:	11 c0       	rjmp	.+34     	; 0x2b6 <__floatsisf+0x6a>
 294:	77 23       	and	r23, r23
 296:	21 f0       	breq	.+8      	; 0x2a0 <__floatsisf+0x54>
 298:	9e e8       	ldi	r25, 0x8E	; 142
 29a:	87 2f       	mov	r24, r23
 29c:	76 2f       	mov	r23, r22
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <__floatsisf+0x5e>
 2a0:	66 23       	and	r22, r22
 2a2:	71 f0       	breq	.+28     	; 0x2c0 <__floatsisf+0x74>
 2a4:	96 e8       	ldi	r25, 0x86	; 134
 2a6:	86 2f       	mov	r24, r22
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	2a f0       	brmi	.+10     	; 0x2b8 <__floatsisf+0x6c>
 2ae:	9a 95       	dec	r25
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	da f7       	brpl	.-10     	; 0x2ae <__floatsisf+0x62>
 2b8:	88 0f       	add	r24, r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	97 f9       	bld	r25, 7
 2c0:	08 95       	ret

000002c2 <__fp_cmp>:
 2c2:	99 0f       	add	r25, r25
 2c4:	00 08       	sbc	r0, r0
 2c6:	55 0f       	add	r21, r21
 2c8:	aa 0b       	sbc	r26, r26
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	fe ef       	ldi	r31, 0xFE	; 254
 2ce:	16 16       	cp	r1, r22
 2d0:	17 06       	cpc	r1, r23
 2d2:	e8 07       	cpc	r30, r24
 2d4:	f9 07       	cpc	r31, r25
 2d6:	c0 f0       	brcs	.+48     	; 0x308 <__fp_cmp+0x46>
 2d8:	12 16       	cp	r1, r18
 2da:	13 06       	cpc	r1, r19
 2dc:	e4 07       	cpc	r30, r20
 2de:	f5 07       	cpc	r31, r21
 2e0:	98 f0       	brcs	.+38     	; 0x308 <__fp_cmp+0x46>
 2e2:	62 1b       	sub	r22, r18
 2e4:	73 0b       	sbc	r23, r19
 2e6:	84 0b       	sbc	r24, r20
 2e8:	95 0b       	sbc	r25, r21
 2ea:	39 f4       	brne	.+14     	; 0x2fa <__fp_cmp+0x38>
 2ec:	0a 26       	eor	r0, r26
 2ee:	61 f0       	breq	.+24     	; 0x308 <__fp_cmp+0x46>
 2f0:	23 2b       	or	r18, r19
 2f2:	24 2b       	or	r18, r20
 2f4:	25 2b       	or	r18, r21
 2f6:	21 f4       	brne	.+8      	; 0x300 <__fp_cmp+0x3e>
 2f8:	08 95       	ret
 2fa:	0a 26       	eor	r0, r26
 2fc:	09 f4       	brne	.+2      	; 0x300 <__fp_cmp+0x3e>
 2fe:	a1 40       	sbci	r26, 0x01	; 1
 300:	a6 95       	lsr	r26
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	81 1d       	adc	r24, r1
 306:	81 1d       	adc	r24, r1
 308:	08 95       	ret

0000030a <__fp_split3>:
 30a:	57 fd       	sbrc	r21, 7
 30c:	90 58       	subi	r25, 0x80	; 128
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	59 f0       	breq	.+22     	; 0x32a <__fp_splitA+0x10>
 314:	5f 3f       	cpi	r21, 0xFF	; 255
 316:	71 f0       	breq	.+28     	; 0x334 <__fp_splitA+0x1a>
 318:	47 95       	ror	r20

0000031a <__fp_splitA>:
 31a:	88 0f       	add	r24, r24
 31c:	97 fb       	bst	r25, 7
 31e:	99 1f       	adc	r25, r25
 320:	61 f0       	breq	.+24     	; 0x33a <__fp_splitA+0x20>
 322:	9f 3f       	cpi	r25, 0xFF	; 255
 324:	79 f0       	breq	.+30     	; 0x344 <__fp_splitA+0x2a>
 326:	87 95       	ror	r24
 328:	08 95       	ret
 32a:	12 16       	cp	r1, r18
 32c:	13 06       	cpc	r1, r19
 32e:	14 06       	cpc	r1, r20
 330:	55 1f       	adc	r21, r21
 332:	f2 cf       	rjmp	.-28     	; 0x318 <__fp_split3+0xe>
 334:	46 95       	lsr	r20
 336:	f1 df       	rcall	.-30     	; 0x31a <__fp_splitA>
 338:	08 c0       	rjmp	.+16     	; 0x34a <__fp_splitA+0x30>
 33a:	16 16       	cp	r1, r22
 33c:	17 06       	cpc	r1, r23
 33e:	18 06       	cpc	r1, r24
 340:	99 1f       	adc	r25, r25
 342:	f1 cf       	rjmp	.-30     	; 0x326 <__fp_splitA+0xc>
 344:	86 95       	lsr	r24
 346:	71 05       	cpc	r23, r1
 348:	61 05       	cpc	r22, r1
 34a:	08 94       	sec
 34c:	08 95       	ret

0000034e <__fp_zero>:
 34e:	e8 94       	clt

00000350 <__fp_szero>:
 350:	bb 27       	eor	r27, r27
 352:	66 27       	eor	r22, r22
 354:	77 27       	eor	r23, r23
 356:	cb 01       	movw	r24, r22
 358:	97 f9       	bld	r25, 7
 35a:	08 95       	ret

0000035c <__gesf2>:
 35c:	b2 df       	rcall	.-156    	; 0x2c2 <__fp_cmp>
 35e:	08 f4       	brcc	.+2      	; 0x362 <__gesf2+0x6>
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	08 95       	ret

00000364 <__mulsf3>:
 364:	0b d0       	rcall	.+22     	; 0x37c <__mulsf3x>
 366:	78 c0       	rjmp	.+240    	; 0x458 <__fp_round>
 368:	69 d0       	rcall	.+210    	; 0x43c <__fp_pscA>
 36a:	28 f0       	brcs	.+10     	; 0x376 <__mulsf3+0x12>
 36c:	6e d0       	rcall	.+220    	; 0x44a <__fp_pscB>
 36e:	18 f0       	brcs	.+6      	; 0x376 <__mulsf3+0x12>
 370:	95 23       	and	r25, r21
 372:	09 f0       	breq	.+2      	; 0x376 <__mulsf3+0x12>
 374:	5a c0       	rjmp	.+180    	; 0x42a <__fp_inf>
 376:	5f c0       	rjmp	.+190    	; 0x436 <__fp_nan>
 378:	11 24       	eor	r1, r1
 37a:	ea cf       	rjmp	.-44     	; 0x350 <__fp_szero>

0000037c <__mulsf3x>:
 37c:	c6 df       	rcall	.-116    	; 0x30a <__fp_split3>
 37e:	a0 f3       	brcs	.-24     	; 0x368 <__mulsf3+0x4>

00000380 <__mulsf3_pse>:
 380:	95 9f       	mul	r25, r21
 382:	d1 f3       	breq	.-12     	; 0x378 <__mulsf3+0x14>
 384:	95 0f       	add	r25, r21
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	55 1f       	adc	r21, r21
 38a:	62 9f       	mul	r22, r18
 38c:	f0 01       	movw	r30, r0
 38e:	72 9f       	mul	r23, r18
 390:	bb 27       	eor	r27, r27
 392:	f0 0d       	add	r31, r0
 394:	b1 1d       	adc	r27, r1
 396:	63 9f       	mul	r22, r19
 398:	aa 27       	eor	r26, r26
 39a:	f0 0d       	add	r31, r0
 39c:	b1 1d       	adc	r27, r1
 39e:	aa 1f       	adc	r26, r26
 3a0:	64 9f       	mul	r22, r20
 3a2:	66 27       	eor	r22, r22
 3a4:	b0 0d       	add	r27, r0
 3a6:	a1 1d       	adc	r26, r1
 3a8:	66 1f       	adc	r22, r22
 3aa:	82 9f       	mul	r24, r18
 3ac:	22 27       	eor	r18, r18
 3ae:	b0 0d       	add	r27, r0
 3b0:	a1 1d       	adc	r26, r1
 3b2:	62 1f       	adc	r22, r18
 3b4:	73 9f       	mul	r23, r19
 3b6:	b0 0d       	add	r27, r0
 3b8:	a1 1d       	adc	r26, r1
 3ba:	62 1f       	adc	r22, r18
 3bc:	83 9f       	mul	r24, r19
 3be:	a0 0d       	add	r26, r0
 3c0:	61 1d       	adc	r22, r1
 3c2:	22 1f       	adc	r18, r18
 3c4:	74 9f       	mul	r23, r20
 3c6:	33 27       	eor	r19, r19
 3c8:	a0 0d       	add	r26, r0
 3ca:	61 1d       	adc	r22, r1
 3cc:	23 1f       	adc	r18, r19
 3ce:	84 9f       	mul	r24, r20
 3d0:	60 0d       	add	r22, r0
 3d2:	21 1d       	adc	r18, r1
 3d4:	82 2f       	mov	r24, r18
 3d6:	76 2f       	mov	r23, r22
 3d8:	6a 2f       	mov	r22, r26
 3da:	11 24       	eor	r1, r1
 3dc:	9f 57       	subi	r25, 0x7F	; 127
 3de:	50 40       	sbci	r21, 0x00	; 0
 3e0:	8a f0       	brmi	.+34     	; 0x404 <__mulsf3_pse+0x84>
 3e2:	e1 f0       	breq	.+56     	; 0x41c <__mulsf3_pse+0x9c>
 3e4:	88 23       	and	r24, r24
 3e6:	4a f0       	brmi	.+18     	; 0x3fa <__mulsf3_pse+0x7a>
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	bb 1f       	adc	r27, r27
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	a9 f7       	brne	.-22     	; 0x3e4 <__mulsf3_pse+0x64>
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	51 05       	cpc	r21, r1
 3fe:	70 f0       	brcs	.+28     	; 0x41c <__mulsf3_pse+0x9c>
 400:	14 c0       	rjmp	.+40     	; 0x42a <__fp_inf>
 402:	a6 cf       	rjmp	.-180    	; 0x350 <__fp_szero>
 404:	5f 3f       	cpi	r21, 0xFF	; 255
 406:	ec f3       	brlt	.-6      	; 0x402 <__mulsf3_pse+0x82>
 408:	98 3e       	cpi	r25, 0xE8	; 232
 40a:	dc f3       	brlt	.-10     	; 0x402 <__mulsf3_pse+0x82>
 40c:	86 95       	lsr	r24
 40e:	77 95       	ror	r23
 410:	67 95       	ror	r22
 412:	b7 95       	ror	r27
 414:	f7 95       	ror	r31
 416:	e7 95       	ror	r30
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	c1 f7       	brne	.-16     	; 0x40c <__mulsf3_pse+0x8c>
 41c:	fe 2b       	or	r31, r30
 41e:	88 0f       	add	r24, r24
 420:	91 1d       	adc	r25, r1
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	97 f9       	bld	r25, 7
 428:	08 95       	ret

0000042a <__fp_inf>:
 42a:	97 f9       	bld	r25, 7
 42c:	9f 67       	ori	r25, 0x7F	; 127
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	08 95       	ret

00000436 <__fp_nan>:
 436:	9f ef       	ldi	r25, 0xFF	; 255
 438:	80 ec       	ldi	r24, 0xC0	; 192
 43a:	08 95       	ret

0000043c <__fp_pscA>:
 43c:	00 24       	eor	r0, r0
 43e:	0a 94       	dec	r0
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	18 06       	cpc	r1, r24
 446:	09 06       	cpc	r0, r25
 448:	08 95       	ret

0000044a <__fp_pscB>:
 44a:	00 24       	eor	r0, r0
 44c:	0a 94       	dec	r0
 44e:	12 16       	cp	r1, r18
 450:	13 06       	cpc	r1, r19
 452:	14 06       	cpc	r1, r20
 454:	05 06       	cpc	r0, r21
 456:	08 95       	ret

00000458 <__fp_round>:
 458:	09 2e       	mov	r0, r25
 45a:	03 94       	inc	r0
 45c:	00 0c       	add	r0, r0
 45e:	11 f4       	brne	.+4      	; 0x464 <__stack+0x5>
 460:	88 23       	and	r24, r24
 462:	52 f0       	brmi	.+20     	; 0x478 <__stack+0x19>
 464:	bb 0f       	add	r27, r27
 466:	40 f4       	brcc	.+16     	; 0x478 <__stack+0x19>
 468:	bf 2b       	or	r27, r31
 46a:	11 f4       	brne	.+4      	; 0x470 <__stack+0x11>
 46c:	60 ff       	sbrs	r22, 0
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__stack+0x19>
 470:	6f 5f       	subi	r22, 0xFF	; 255
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__udivmodhi4>:
 47a:	aa 1b       	sub	r26, r26
 47c:	bb 1b       	sub	r27, r27
 47e:	51 e1       	ldi	r21, 0x11	; 17
 480:	07 c0       	rjmp	.+14     	; 0x490 <__udivmodhi4_ep>

00000482 <__udivmodhi4_loop>:
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	a6 17       	cp	r26, r22
 488:	b7 07       	cpc	r27, r23
 48a:	10 f0       	brcs	.+4      	; 0x490 <__udivmodhi4_ep>
 48c:	a6 1b       	sub	r26, r22
 48e:	b7 0b       	sbc	r27, r23

00000490 <__udivmodhi4_ep>:
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	5a 95       	dec	r21
 496:	a9 f7       	brne	.-22     	; 0x482 <__udivmodhi4_loop>
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
