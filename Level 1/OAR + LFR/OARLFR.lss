
OARLFR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000102  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a6  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a1  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e2  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRD=0b00000000; //Setting part D as an input part
  6c:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111; //Seting Part B as an Output part
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111; //Pulling up all the pins of part B
  72:	82 bb       	out	0x12, r24	; 18
int c;
while(1)
{
c=PIND;
if(c==0b11111010) //No obstacle
PORTB=0b00001010; //Forward
  74:	4a e0       	ldi	r20, 0x0A	; 10

if(c==0b11111011) 
PORTB=0b00001001;

if(c==0b11111110)
 PORTB=0b00000110;
  76:	76 e0       	ldi	r23, 0x06	; 6
c=PIND;
if(c==0b11111010) //No obstacle
PORTB=0b00001010; //Forward

if(c==0b11111011) 
PORTB=0b00001001;
  78:	69 e0       	ldi	r22, 0x09	; 9



if(c==0b11111101) //Obstacle at the center
{
PORTB=0b00010000; //Stop
  7a:	50 e1       	ldi	r21, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	24 ed       	ldi	r18, 0xD4	; 212
  7e:	30 e3       	ldi	r19, 0x30	; 48
DDRB=0b11111111; //Seting Part B as an Output part
PORTD=0b11111111; //Pulling up all the pins of part B
int c;
while(1)
{
c=PIND;
  80:	80 b3       	in	r24, 0x10	; 16
  82:	90 e0       	ldi	r25, 0x00	; 0
if(c==0b11111010) //No obstacle
  84:	8a 3f       	cpi	r24, 0xFA	; 250
  86:	91 05       	cpc	r25, r1
  88:	11 f4       	brne	.+4      	; 0x8e <main+0x22>
PORTB=0b00001010; //Forward
  8a:	48 bb       	out	0x18, r20	; 24
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <main+0x3c>

if(c==0b11111011) 
  8e:	8b 3f       	cpi	r24, 0xFB	; 251
  90:	91 05       	cpc	r25, r1
  92:	11 f4       	brne	.+4      	; 0x98 <main+0x2c>
PORTB=0b00001001;
  94:	68 bb       	out	0x18, r22	; 24
  96:	0d c0       	rjmp	.+26     	; 0xb2 <main+0x46>

if(c==0b11111110)
  98:	8e 3f       	cpi	r24, 0xFE	; 254
  9a:	91 05       	cpc	r25, r1
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x36>
 PORTB=0b00000110;
  9e:	78 bb       	out	0x18, r23	; 24
  a0:	ef cf       	rjmp	.-34     	; 0x80 <main+0x14>


if(c==0b11111000) 
  a2:	88 3f       	cpi	r24, 0xF8	; 248
  a4:	91 05       	cpc	r25, r1
  a6:	19 f0       	breq	.+6      	; 0xae <main+0x42>
PORTB=0b00000000;

if(c==0b11111001) 
  a8:	89 3f       	cpi	r24, 0xF9	; 249
  aa:	91 05       	cpc	r25, r1
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x46>
PORTB=0b00000000;
  ae:	18 ba       	out	0x18, r1	; 24
  b0:	e7 cf       	rjmp	.-50     	; 0x80 <main+0x14>



if(c==0b11111101) //Obstacle at the center
  b2:	8d 3f       	cpi	r24, 0xFD	; 253
  b4:	91 05       	cpc	r25, r1
  b6:	21 f7       	brne	.-56     	; 0x80 <main+0x14>
{
PORTB=0b00010000; //Stop
  b8:	58 bb       	out	0x18, r21	; 24
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x50>
_delay_ms(50);
PORTB=0b00001010;
  c0:	48 bb       	out	0x18, r20	; 24
  c2:	de cf       	rjmp	.-68     	; 0x80 <main+0x14>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
