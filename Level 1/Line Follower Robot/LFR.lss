
LFR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012d  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b5  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000188  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e9  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000068  00000000  00000000  000005bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRD=0b00000000;           //setting
  6c:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111;           //part D as an input part
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111;          //Setting
  72:	82 bb       	out	0x12, r24	; 18
int c;                     //Part B as an output part    
while(1)                           //Pulling up all the pins of part D
  {
  c=PIND;
  if (c==0b11111100)            //straight path
  PORTB=0b00001010;            //forward
  74:	6a e0       	ldi	r22, 0x0A	; 10
  PORTB=0b00000110;            //right turn
  if (c==0b11111110)            //path turns left  
  PORTB=0b00001001;            //left turn
  if (c==0b11111111)           //crossroad
  {
  PORTB=0b00010000;            //beep and go forward
  76:	f0 e1       	ldi	r31, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	44 ed       	ldi	r20, 0xD4	; 212
  7a:	50 e3       	ldi	r21, 0x30	; 48
  {
  c=PIND;
  if (c==0b11111100)            //straight path
  PORTB=0b00001010;            //forward
  if (c==0b11111110)              //path turns right 
  PORTB=0b00000110;            //right turn
  7c:	20 e5       	ldi	r18, 0x50	; 80
  7e:	33 ec       	ldi	r19, 0xC3	; 195
  80:	e6 e0       	ldi	r30, 0x06	; 6
  if (c==0b11111110)            //path turns left  
  PORTB=0b00001001;            //left turn
  82:	79 e0       	ldi	r23, 0x09	; 9
DDRB=0b11111111;           //part D as an input part
PORTD=0b11111111;          //Setting
int c;                     //Part B as an output part    
while(1)                           //Pulling up all the pins of part D
  {
  c=PIND;
  84:	80 b3       	in	r24, 0x10	; 16
  86:	90 e0       	ldi	r25, 0x00	; 0
  if (c==0b11111100)            //straight path
  88:	8c 3f       	cpi	r24, 0xFC	; 252
  8a:	91 05       	cpc	r25, r1
  8c:	11 f4       	brne	.+4      	; 0x92 <main+0x26>
  PORTB=0b00001010;            //forward
  8e:	68 bb       	out	0x18, r22	; 24
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0x18>
  if (c==0b11111110)              //path turns right 
  92:	8e 3f       	cpi	r24, 0xFE	; 254
  94:	91 05       	cpc	r25, r1
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x32>
  PORTB=0b00000110;            //right turn
  98:	e8 bb       	out	0x18, r30	; 24
  if (c==0b11111110)            //path turns left  
  PORTB=0b00001001;            //left turn
  9a:	78 bb       	out	0x18, r23	; 24
  9c:	f3 cf       	rjmp	.-26     	; 0x84 <main+0x18>
  if (c==0b11111111)           //crossroad
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	91 05       	cpc	r25, r1
  a2:	81 f7       	brne	.-32     	; 0x84 <main+0x18>
  {
  PORTB=0b00010000;            //beep and go forward
  a4:	f8 bb       	out	0x18, r31	; 24
  a6:	ca 01       	movw	r24, r20
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
  _delay_ms(50);
  PORTB=0b00001010;
  ac:	68 bb       	out	0x18, r22	; 24
  ae:	c9 01       	movw	r24, r18
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <main+0x18>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
