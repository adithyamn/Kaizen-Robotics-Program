
OAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003af  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f5  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000314  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000da  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003d8  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRD=0b00000000; //Setting part D as an input part
  6c:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111; //Seting Part B as an Output part
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111; //Pulling up all the pins of part B
  72:	82 bb       	out	0x12, r24	; 18
PORTB=0b00001001;
_delay_ms(300);
}
if(c==0b11111100) //Obstacle to the center and right
{
PORTB=0b00000101; //Go back and turn left
  74:	65 e0       	ldi	r22, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	49 e1       	ldi	r20, 0x19	; 25
  78:	50 e0       	ldi	r21, 0x00	; 0
_delay_ms(300);
PORTB=0b00000110;
  7a:	76 e0       	ldi	r23, 0x06	; 6
PORTB=0b00000110; //Turn Left
if(c==0b00000101)
{
PORTB=0b00000101; //Go back and turn right
_delay_ms(300);
PORTB=0b00001001;
  7c:	a9 e0       	ldi	r26, 0x09	; 9
DDRB=0b11111111; //Seting Part B as an Output part
PORTD=0b11111111; //Pulling up all the pins of part B
int c;
while(1)
{
c=PIND;
  7e:	80 b3       	in	r24, 0x10	; 16
  80:	90 e0       	ldi	r25, 0x00	; 0
if(c==0b11111111) //No obstacle
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	91 05       	cpc	r25, r1
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x20>
PORTB=0b00000000; //Forward
  88:	18 ba       	out	0x18, r1	; 24
  8a:	2f c0       	rjmp	.+94     	; 0xea <main+0x7e>
if(c==0b00001001) //Obstacle to the right
  8c:	89 30       	cpi	r24, 0x09	; 9
  8e:	91 05       	cpc	r25, r1
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x2a>
PORTB=0b00000110; //Turn Left
  92:	78 bb       	out	0x18, r23	; 24
  94:	2f c0       	rjmp	.+94     	; 0xf4 <main+0x88>
if(c==0b00000101)
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	91 05       	cpc	r25, r1
  9a:	99 f4       	brne	.+38     	; 0xc2 <main+0x56>
{
PORTB=0b00000101; //Go back and turn right
  9c:	68 bb       	out	0x18, r22	; 24
  9e:	28 eb       	ldi	r18, 0xB8	; 184
  a0:	3b e0       	ldi	r19, 0x0B	; 11
  a2:	fa 01       	movw	r30, r20
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d1 f7       	brne	.-12     	; 0xa2 <main+0x36>
_delay_ms(300);
PORTB=0b00001001;
  ae:	a8 bb       	out	0x18, r26	; 24
  b0:	28 eb       	ldi	r18, 0xB8	; 184
  b2:	3b e0       	ldi	r19, 0x0B	; 11
  b4:	fa 01       	movw	r30, r20
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d1 f7       	brne	.-12     	; 0xb4 <main+0x48>
  c0:	41 c0       	rjmp	.+130    	; 0x144 <main+0xd8>
_delay_ms(300);
}
if(c==0b11111100) //Obstacle to the center and right
  c2:	8c 3f       	cpi	r24, 0xFC	; 252
  c4:	91 05       	cpc	r25, r1
  c6:	89 f4       	brne	.+34     	; 0xea <main+0x7e>
{
PORTB=0b00000101; //Go back and turn left
  c8:	68 bb       	out	0x18, r22	; 24
  ca:	88 eb       	ldi	r24, 0xB8	; 184
  cc:	9b e0       	ldi	r25, 0x0B	; 11
  ce:	fa 01       	movw	r30, r20
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x62>
_delay_ms(300);
PORTB=0b00000110;
  d8:	78 bb       	out	0x18, r23	; 24
  da:	88 eb       	ldi	r24, 0xB8	; 184
  dc:	9b e0       	ldi	r25, 0x0B	; 11
  de:	fa 01       	movw	r30, r20
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x72>
  e8:	ca cf       	rjmp	.-108    	; 0x7e <main+0x12>
_delay_ms(300);
}
if(c==0b11110111) //Obstacle to the left
  ea:	87 3f       	cpi	r24, 0xF7	; 247
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <main+0x88>
PORTB=0b00001001; //Turn Right
  f0:	a8 bb       	out	0x18, r26	; 24
  f2:	c5 cf       	rjmp	.-118    	; 0x7e <main+0x12>
if(c==0b11111010) //Obstacle on both sides of the robot
  f4:	8a 3f       	cpi	r24, 0xFA	; 250
  f6:	91 05       	cpc	r25, r1
  f8:	89 f4       	brne	.+34     	; 0x11c <main+0xb0>
{
PORTB=0b00000101;//Go back and turn right
  fa:	68 bb       	out	0x18, r22	; 24
  fc:	88 eb       	ldi	r24, 0xB8	; 184
  fe:	9b e0       	ldi	r25, 0x0B	; 11
 100:	fa 01       	movw	r30, r20
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <main+0x94>
_delay_ms(300);
PORTB=0b00000110;
 10a:	78 bb       	out	0x18, r23	; 24
 10c:	88 eb       	ldi	r24, 0xB8	; 184
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	fa 01       	movw	r30, r20
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0xa4>
 11a:	b1 cf       	rjmp	.-158    	; 0x7e <main+0x12>
_delay_ms(300);
}
if(c==0b11111001) //Obstacle on the center and left
 11c:	89 3f       	cpi	r24, 0xF9	; 249
 11e:	91 05       	cpc	r25, r1
 120:	89 f4       	brne	.+34     	; 0x144 <main+0xd8>
{
PORTB=0b00000101; //Go back and turn right
 122:	68 bb       	out	0x18, r22	; 24
 124:	88 eb       	ldi	r24, 0xB8	; 184
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	fa 01       	movw	r30, r20
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0xbc>
_delay_ms(300);
PORTB=0b00000110;
 132:	78 bb       	out	0x18, r23	; 24
 134:	88 eb       	ldi	r24, 0xB8	; 184
 136:	9b e0       	ldi	r25, 0x0B	; 11
 138:	fa 01       	movw	r30, r20
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0xcc>
 142:	9d cf       	rjmp	.-198    	; 0x7e <main+0x12>
_delay_ms(300);
}
if(c==0b11111000) //Obstacle on all sides
 144:	88 3f       	cpi	r24, 0xF8	; 248
 146:	91 05       	cpc	r25, r1
 148:	09 f0       	breq	.+2      	; 0x14c <main+0xe0>
 14a:	99 cf       	rjmp	.-206    	; 0x7e <main+0x12>

{
PORTB=0b00000101; //U turn
 14c:	68 bb       	out	0x18, r22	; 24
 14e:	88 eb       	ldi	r24, 0xB8	; 184
 150:	9b e0       	ldi	r25, 0x0B	; 11
 152:	fa 01       	movw	r30, r20
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <main+0xe6>
_delay_ms(300);
PORTB=0b00001001;
 15c:	a8 bb       	out	0x18, r26	; 24
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	9e e4       	ldi	r25, 0x4E	; 78
 162:	fa 01       	movw	r30, r20
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d9 f7       	brne	.-10     	; 0x162 <main+0xf6>
 16c:	88 cf       	rjmp	.-240    	; 0x7e <main+0x12>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
